<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daydream-noquitter.github.io/coding.github.io/</id>
    <title>Gridea</title>
    <updated>2022-05-15T14:53:15.351Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daydream-noquitter.github.io/coding.github.io/"/>
    <link rel="self" href="https://daydream-noquitter.github.io/coding.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://daydream-noquitter.github.io/coding.github.io/images/avatar.png</logo>
    <icon>https://daydream-noquitter.github.io/coding.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[软件构造 5.15]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-515/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-515/">
        </link>
        <updated>2022-05-15T14:20:33.000Z</updated>
        <content type="html"><![CDATA[<p>上周因为复习形式语言自动机鸽掉了，这周不能鸽了<br>
其实软件构造的思想非常自然<br>
承认：<br>
1.人都是会犯错的 ，再聪明的程序员，业务经理也是会犯错的，那么我们应该设计的不是一个依赖于不发生错误的系统，而是一个允许错误发生过并且修改的一个系统或者机制 ，这就是规约最重要的作用<br>
2.在人实现思维的过程中，程序员更像是进入其中一样，就像我们需要一个地图或者一个无人机 GPS之类的在上指引着我们一样，规约也一样，它像是我们在实现这件事情的时候，先提前约定好我们做什么事情，而不是我们在做事情的时候，一脸发懵的想我们该干什么，不该干什么。这有助于我们更优雅的完成任务<br>
3.人总会犯错的，犯错了就要找背锅的，那么互相扯皮肯定没啥意思，一纸规约正好解决了这个问题<br>
4.人在实现完一个程序的时候，一定是非常开心的，TA并不愿意去想我费了这么大劲写好的代码有什么问题，那么提前写测试或者规约就有这个好处，因为它有助于你在程序开发完之后重新客观审视自己的代码有没有问题。<br>
5.规约与提前测试，实际上非常符合人的心理波动与行为规律。我们思考全局最合适的时候，其一是在任务开始前，其二在任务结束后，其三在任务卡住的时候。我们并不是平白无故的增加工作量或者思考量，我们只是将工作量或者思考量迁移到之前，并且节约了更大的力气和避免了更多的麻烦。</p>
<p>希望CSAPP rp ++</p>
<p>等价类测试的思想太绝妙了，它正好解决了我思维的不足<br>
其实对于一个发散性思维或者活跃思维的人来说，最大的麻烦就是想的不全或者草率，而等价类测试正好解决了这个问题，因为它正好覆盖了问题可能出现的全部情况。<br>
讲一个王子探宝盒的故事（自己瞎编的），从前有一个王子，他去某一个神秘领域里面探险，他的面前有九个坑，分别对应九个洞穴，每个洞穴都有n层，n未知，某个洞穴的最低层有着他所需要的一切最宝贵的东西，王子可以做的事情，有往下一层，在某一层的部分区域探索，做出一个决定，在这一层继续探索，下一层去探索（当然，前提是发现了到下一层的路），回到上一层（当然前提是他想到了回到上一层），他所具有的属性，Hp，血量，VP，体力，RP，人品（幸运程度），SAN（清醒程度） ，TP（思考能力），AP（执行程度），LST（所必须的最晚离开宝地的时间），LPT（自己规定的离开某处的时间），TTT（想要拿到宝贵的东西的欲望程度），DVP（对于宝贵的东西的认识程度）。目前想到的属性就这些。<br>
有很多种任务类型 ，可以想到的，有<br>
1.到每一个地方，都会摸索到宝贵的东西相关的线索<br>
2.到每一个地方，都会逐渐认识到宝贵的东西是什么，但是得不到它在哪里的线索，而且认识对于最后获得没有影响。<br>
3.到每一个地方，都会逐渐认识到宝贵的东西是什么，但是得不到它在哪里的线索，而且认识对于最后获得有影响，比如必须要探索到足够的认识，才能最终获得<br>
4.到每一个地方，只有消耗，并无补充，最后在一定时间之后如果不返回到某个出口的话，就离不开了<br>
5.到每一个地方，只有消耗，并无补充，最后在一定时间之后如果不得到宝贵的东西的话，就离不开了<br>
6.到每一个地方，只有消耗，又有补充，最后在一定时间之后如果不得到宝贵的东西的话，就离不开了<br>
那么其实上述可以很清晰的看到并没有遍历全这个故事的所有模型对吧，那么这个故事未完待续，如果有人在提前看到的话，那就自行脑补体会吧（嘿嘿）。<br>
古希腊的浪漫，东方古典哲学的辨思，还是很有意思的。<br>
—————— 与技术无关，纯个人瞎说点什么，怕自己以后忘了。<br>
可以想到的，人不会总在一个评价体系里呆着，一个人的人生可以看作是从一个评价体系到另外一个评价体系，那么我们把所有的精力都用来在这个评价体系里达到最高点，显然并不是最优解，那么比较合理的是事实上我们既为目前的体系做出足够的努力，又为将来的评价体系做出一定的努力。那么有意思的事情就来了，我们可能会做出我们意识不到对自己将来有用的事情，这也是可以想到的，那么我们往往的自我评估都是从自己出发的，也就是并不一定非常科学，很有可能我们现在做了对以后有用的事情，但是我们现在意识不到，hhh，这很正常了。那么我们只能尽量做出科学的评价，并且尽量做出科学的安排与规划。<br>
活到下一集很重要，但它不是人生的全部，对吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造 5.1 （java语法）]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-51-java-yu-fa/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-51-java-yu-fa/">
        </link>
        <updated>2022-05-01T14:05:15.000Z</updated>
        <content type="html"><![CDATA[<p>1.set<br>
set相当于维护了一个集合<br>
set.contain()用来判断一个元素是否在这个集合中<br>
set.add() 用来向set里面添加一个元素<br>
2.list<br>
list.add<br>
用for进行遍历<br>
用这种方法来遍历<br>
3.map<br>
map.put(,)<br>
map.get()<br>
常用的两个接口<br>
思考一下java也是一个面向对象语言，所以我在思考的时候，实际上就是在思考这个对象应该怎么来操作。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造 4.25]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-425/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-425/">
        </link>
        <updated>2022-04-25T16:19:04.000Z</updated>
        <content type="html"><![CDATA[<p>今天的课程主要分为两个部分，第一节课 主要是讲怎么划分等价类 值得注意的是一道题 因为D没有考虑length和0的关系，所以虽然看上去非常正确，但是还是不对的。<br>
第二节课 主要是在讲习题课，还好，java比我想象的好上手多了，另外java真的好舒服，有一点开发的感觉了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/hello-gridea/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>