<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://daydream-noquitter.github.io/coding.github.io/</id>
    <title>Gridea</title>
    <updated>2022-06-14T15:32:29.559Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://daydream-noquitter.github.io/coding.github.io/"/>
    <link rel="self" href="https://daydream-noquitter.github.io/coding.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://daydream-noquitter.github.io/coding.github.io/images/avatar.png</logo>
    <icon>https://daydream-noquitter.github.io/coding.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[ 另一种观点看软件构造-契约论看软件构造]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ling-yi-chong-guan-dian-kan-ruan-jian-gou-zao-qi-yue-lun-kan-ruan-jian-gou-zao/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ling-yi-chong-guan-dian-kan-ruan-jian-gou-zao-qi-yue-lun-kan-ruan-jian-gou-zao/">
        </link>
        <updated>2022-06-13T14:51:41.000Z</updated>
        <content type="html"><![CDATA[<p>借用社会契约论中的观点，<br>
规定了权利与义务。<br>
实际上spec规定了开发者和客户端的权利与义务。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[另一种观点--信息观点看软件构造]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ling-yi-chong-guan-dian-xin-xi-guan-dian-kan-ruan-jian-gou-zao/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ling-yi-chong-guan-dian-xin-xi-guan-dian-kan-ruan-jian-gou-zao/">
        </link>
        <updated>2022-06-12T14:36:37.000Z</updated>
        <content type="html"><![CDATA[<p>主观臆断的某些thoughts<br>
1.一个问题能够用某种信息系统解决的前提是它能被该信息系统表示<br>
2.电子计算机的物理基础是电子管来表示01 ，逻辑基础为图灵机<br>
3.一个问题能被某种信息系统模拟的前提是它的能力不超过该信息系统的能力，如图灵机可表示的状态转移，DFA NFA不一定能表示<br>
软件构造核心解决的问题，不是说用什么算法去解决一个具体的问题，而是能够想出来一个过程能被一个算法解决的基础上，去抛弃具象的壳，而去集中火力去思考抽象的逻辑关系与表示。<br>
事实上，这学期上的形式语言与自动机，计算机系统，软件构造，人工智能都在讲同一件事情，什么是计算机，计算机在干什么，怎么用计算机解决问题。<br>
站在信息程度考虑一下，软件构造在干什么？<br>
它实际上是对两个信息系统及其关系的描述。<br>
spec在干什么？它实际上就是在约定两个信息系统的作用域与观察域。<br>
设程序员的信息系统为S1，客户端的信息系统为S2<br>
基于thought1 设 实现端没法表示的一个问题为A1，S2发送一个请求 A1，（借用信息安全概论的TCP！。！） 希望S1解决A1，但是我S1根本表示不了A1，何谈解决A1。<br>
举个具体的例子，S1的rep为boolean 方法只有一个构造函数，其余啥也没有，A 1为希望得到两个字符串的连接，开玩笑呢、表示都表示不了，怎么能谈解决呢。<br>
那么再举一个例子，S1'的rep为 string  这样的话，至少能表示A1中的基础空间了，至少有解决问题的前提了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于习题课三的thoughts]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/guan-yu-xi-ti-ke-san-de-thoughts/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/guan-yu-xi-ti-ke-san-de-thoughts/">
        </link>
        <updated>2022-06-11T13:54:03.000Z</updated>
        <content type="html"><![CDATA[<p>首先前两部分没什么太多的东西<br>
1.扩展car到其他交通工具类型 ：可复用性<br>
为什么这个东西可以扩展呢<br>
在于他们都有一个ability 但是可能大家都忽视的，就是他们都能停在停车场上，这是这几个object对于该任务的核心共性，parkability 在拓宽之后，可以对停object场，可以实现为每一次停object只要 某个lot的宽度大于object的宽度就可以停在这里<br>
因而可以想到<br>
可以设计一个parkable接口 提供核心的两个能力，getwidth getplace<br>
而为了通用考虑，concreteparkingFiled record也就不能再用car而是要用parkable接口了<br>
2.wonderful！<br>
我们很自然的迎来了第一个问题？-？<br>
在之前的parking方法中，我们是怎么实现的一个car 是不是用的new car<br>
那么我们现在如果还用new car new motor这样会带来什么问题》<br>
回顾工厂方法面对的问题是什么？<br>
就是当客户端不知道要创建哪个类的实例时，或者不想在客户端代码指明要创建的实例时，用工厂方法<br>
3.考虑怎么增加子类型的共用rep<br>
很好想 ，在接口中增加一个field即可<br>
那么新的一个计算方法怎么设计呢，修改方法，新增get方法获取即可<br>
4.考虑不同车辆个体还想变怎么动呢，很简单，只需要给每个实现类都实现一个构造函数，在构造的时候，把这个参数传进去就可以了<br>
5.visitor<br>
很显然我只是把这个观察方法写死到这里面，以后动不了了，可复用性太差了对吧<br>
那么用vistor设计模式就可以很自然的解决这个问题<br>
来吧，回忆一下visitor是怎么干的<br>
先去建立一个visitor的接口 parkingVisitor 只有一个方法 visit 方法<br>
实现它的子类 PercentageVisitor 实现该visit方法 调用pf的方法获得pf的rep<br>
再写一个accept（ParkingVisitor pv）  pv.visit（this）<br>
如果还需要实现其他的呢，那就再实现一些新的visitor就好了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造（把玩一些小例子+thoughts）]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-ba-wan-yi-xie-xiao-li-zi-thoughts/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-ba-wan-yi-xie-xiao-li-zi-thoughts/">
        </link>
        <updated>2022-06-11T02:26:38.000Z</updated>
        <content type="html"><![CDATA[<p>1.CRP example<br>
1） employee<br>
展示了一个object level的reuse是多么强大<br>
事实上这也是很容易理解的。<br>
可以想到一个虽然语言是我们编写的，存在着一套根据语言的逻辑体系，而这种逻辑体系同样也符合人的思考逻辑体系<br>
事实上 就是共性的范围越来越小的时候，怎么去更灵活的使用，比如说我们去思考 programmer和 manager之间的联系，事实上就是他们都是人，他们都领工资，他们都是这个公司的职员，还有其他的么，没有了。<br>
那么一个支持object的reuse，符合人类认知习惯，也就十分重要了。<br>
另一个很有意思的地方，客户端调用的时候，是直接调用的它的computeBonus 而这些像new MangagerBonusCalculator是我们自己写的时候才去声明的，为什么？为什么可以这么干？因为我们在实现的时候应该知道我们要调用哪个实现类。<br>
对于这种问题，可以用一种比较一般的方法来衡量，就是信息公共体系。这个体系来衡量谁应该知道什么，不应该知道什么，（实际上就是SPEC对吧），但是它是所有的spec组织起来的一个体系。在大的项目里面，只看几个spec（通常是一个程序员编程的上限）还是不那么容易确定好框架的。<br>
2）zoo<br>
这个例子展示了多种方法，多重属性之间怎么利用CRP原则实现<br>
对于OOP，我一直坚持的一个习惯就是先要确定各个对象的范畴，以及各个对象的组织关系，从而思考出来他们之间的架构体系。这样会十分自然。<br>
所谓软件构造就是一步步把具象的东西撇开，扒出里面最抽象的东西，对着它一顿猛攻。<br>
这里面先把动物名字撇了，没用，只是一堆爱是啥是啥的动物而已。<br>
然后把行为名字，也撇了。再考察各个行为之间有没有关系，好，没有，那么行为之间就独立化了。<br>
好了，我们现在有一堆不知道叫啥的行为，有一堆不知道叫啥的动物，我们希望能通用的实现这个能力，某种动物能够组合的应用某些行为能力。<br>
为了通用化，我们很自然可以想到没有能力应该是能力实现的一种情况而不应该单独作为一种情况。<br>
那么就是一个动物应该委派这些类型的行为。先声明是一个很easy的想法，但是它会进化诶？！<br>
那么我们是不是应该加一个mutator，让它自己的行为能够发生改变。<br>
在这里我们引入另外一种思考方法，就是信息完备定理。这个表示的是如果我这里面根本没用对应的信息，那么怎么搞这个都搞不出来这些信息。这里讲mutator看作一种信息，如果我自己没用改变的这个信息母体，那我怎么动也不可能进化啊，那么就需要加一个mutator，从而允许进化的可能。<br>
那么这个例子我们就做完了。<br>
3）课后习题</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造（知识点捡漏）]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-zhi-shi-dian-jian-lou/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-zhi-shi-dian-jian-lou/">
        </link>
        <updated>2022-06-11T01:25:04.000Z</updated>
        <content type="html"><![CDATA[<p>1.黑盒框架 白盒框架<br>
白盒框架 通过继承和动态绑定<br>
通过用模板模式<br>
.黑盒框架 通过接口或委派进行扩展<br>
逻辑上 后面就讲的几种模式属于黑盒框架中的某些实现方式<br>
2.-able -ator<br>
以下关于Java中的-able和-ator的说法，不正确的是__</p>
<p>A Comparator<T>是个接口，其类要实现的方法是compareTo(T a)<br>
B Comparable<T>是个抽象类，子类需要实现的方法是compare (T a1, T a2)<br>
C Iterable<E>是个接口，iterator()是其类要实现的方法<br>
D Iterator<E>是个抽象类，其子类要实现的方法有hasNext(), next(), remove()<br>
E Observable是个抽象类，其子类要实现的方法之一是notifyObservers()<br>
F Observer是个抽象类，其子类要实现的方法之一是update(...)</p>
<p>正确答案：ABDF<br>
Comparator 在第十章讲的 它是个接口 实现的是compare (T a1, T a2)<br>
那么不如继续看一看第十章为什么以它为例子以及讲了什么吧<br>
一种方法让ADT实现这个接口 并重写里面的compare函数</p>
<p>Iterable在第十一章讲的</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于override和overload]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/guan-yu-override-he-overload/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/guan-yu-override-he-overload/">
        </link>
        <updated>2022-06-05T15:08:18.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://daydream-noquitter.github.io/coding.github.io//post-images/1654441756216.png" alt="" loading="lazy"></figure>
<p>这道题问的是 Animal animalRefTohorse = new Horse（）<br>
animalrRefTohorse是哪种类型的<br>
第一反应是它是horse的为什么呢<br>
实际上区分override overload 看参数列表</p>
<p>另外的事情就是 接口 A = new B（）；<br>
这样其实A只能调用接口里声明的方法</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第1.3讲]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/di-13-jiang/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/di-13-jiang/">
        </link>
        <updated>2022-06-02T12:28:53.000Z</updated>
        <content type="html"><![CDATA[<p>一：<br>
先要搞清楚“软件构造的对象是什么”、“如何刻画”，<br>
然后再关注“如何构造”<br>
这是方法论<br>
按照阶段划分  build 和tuntime<br>
按照动态性 moment 和period moment指某一时刻，period指这一阶段的<br>
按照层次 代码<br>
其实这些都很容易思考出来<br>
二：<br>
Git的结构、工作原理、基本指令<br>
一个 Git 仓库分为三个部分：<br>
.git 目录：本地的 CMDB<br>
工作目录：本地文件系统<br>
暂存区：.git 目录中的一个文件，隔离工作目录和 Git 仓库</p>
<p>一个 commit 存储一个树形结点。tree 中包含了数个 blob；每个 blob 是一个压缩了的仓库文件，不保存文件名信息。<br>
对于每个文件的每个版本（或是不同文件名但相同内容的文件），Git 只会存储一个 blob，而允许多个 commit tree 指向同一个 blob。<br>
一个 commit 中与之前相比未发生变化的文件，无需重复存储。文件未发生变化，则后续多个版本始终指向同一个 blob；文件发生变化了，存储两份不同的 blob，两个版本指向不同的 blob。<br>
常用指令<br>
git add .<br>
git commit<br>
git checkout<br>
git push<br>
git pull<br>
git fetch</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造复习（二）：6.2 重点梳理（按照往年PPT）]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-fu-xi-er-62-chong-dian-shu-li-an-zhao-wang-nian-ppt/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-fu-xi-er-62-chong-dian-shu-li-an-zhao-wang-nian-ppt/">
        </link>
        <updated>2022-06-02T12:12:57.000Z</updated>
        <content type="html"><![CDATA[<p>第1.3讲<br>
1.软件构造的多维度视图<br>
2.软件构造的阶段划分、各阶段的构造活动<br>
3.内部/外部的质量指标<br>
4.软件配置管理SCM与版本控制系统VCS<br>
5.Git的结构、工作原理、基本指令</p>
<p>第4-8讲<br>
1.基本数据类型、对象数据类型<br>
2.静态/动态类型检查<br>
3.Mutable/Immutable<br>
4.值的改变、引用的改变、final<br>
5.防御式拷贝<br>
6.Snapshot diagram<br>
7.Specification、前置/后置条件<br>
8.行为等价性<br>
9.规约的强度<br>
10.ADT操作的四种类型<br>
11.表示独立性、表示泄露<br>
12. 不变量、表示不变量RI<br>
13.表示空间、抽象空间、AF<br>
14. 以注释的形式撰写AF、RI<br>
15.接口、抽象类、具体类<br>
16. 继承、override<br>
17.多态、overload<br>
18. 泛型<br>
19.等价性equals()和==<br>
20.equals()的自反、传递、对称<br>
21.hashCode()<br>
22. 不可变对象的引用等价性、对象等价性<br>
23. 可变对象的观察等价性、行为等价<br>
第九讲</p>
<ol>
<li>Programing for/with reuse<br>
2.LSP<br>
3.协变、反协变<br>
4.数组的子类型化<br>
5.泛型的子类型化<br>
6.泛型中的通配符(?)<br>
7.Delegation<br>
8.Comparator和Comparable<br>
9.CRP原则<br>
10.接口的组合<br>
11.白盒框架的原理与实现<br>
12.黑盒框架的原理与实现<br>
第十、十一讲<br>
1.可维护性的常见度量指标<br>
2.聚合度与耦合度<br>
3.SOLID<br>
4.语法、正则表达式<br>
5.设计模式adapter、decorator、strategy、template、<br>
iterator/iterable、factory method、visitor</li>
</ol>
<p>第二 十二讲<br>
健壮性和正确性<br>
1.Throwable<br>
2.Error/Runtime异常、其他异常<br>
3.Checked异常、Unchecked异 常§ Checked异常的处理机制： – 声明、抛出、捕获、处理、清理<br>
现场、释放资源等<br>
4.自定义异常类<br>
5.断言的作用、应用场合<br>
6.防御式编程的基本思路<br>
7.黑盒测试用例的设计 – 等价类划分、边界值分析<br>
8.以注释的形式撰写测试策略<br>
9.JUnit测试用例写法<br>
10.测试覆盖度</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造复习（一）：6.1]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-fu-xi-yi-61/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-fu-xi-yi-61/">
        </link>
        <updated>2022-06-01T08:41:53.000Z</updated>
        <content type="html"><![CDATA[<p>面向可维护的软件构造<br>
目录：<br>
 Software Maintenance and Evolution<br>
 Metrics of Maintainability<br>
 Modular Design and Modularity Principles<br>
 OO Design Principles: SOLID<br>
 Grammar-based construction<br>
– Grammar and Parser – Regular Expression (regexp)<br>
一：<br>
软件维护与改进<br>
step：<br>
1.正确的测试<br>
2.回归测试<br>
3.记录变化<br>
注意：<br>
承认事实1： 变化在软件生命周期中是不可避免的事情<br>
附加因素1：我们希望尽可能减少工作量以及尽可能高效的工作<br>
推导结论1： 我们需要注意编写软件中的可维护性，也就是说在初期充分考虑未来的变化<br>
附加因素2：低耦合高内聚<br>
附加因素3：层次结构清晰<br>
推导结论2： 我们需要实现一个框架用来扩展功能<br>
概念解释： “maintainability”,全周期需要考虑的 “extensibility”设计时需要考虑  and<br>
“flexibility”easy to change</p>
<p>SOLID原则实际上就是基于以上几点自然而然推导出来的。<br>
1.单一责任原则（SRP）<br>
基于附加因素2 推导可得<br>
2.开闭原则（OCP）<br>
基于附加因素1 2推导可得<br>
3.里氏替换原则（LSP）<br>
基于因素1 因素3 结论2推导可得<br>
4.接口分离原则（ISP）<br>
基于推导结论2 衍生可得<br>
5.依赖倒置原则<br>
基于因素3 因素2 可得</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[软件构造之抽象层次 ADT OOP]]></title>
        <id>https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-zhi-chou-xiang-ceng-ci-adt-oop/</id>
        <link href="https://daydream-noquitter.github.io/coding.github.io/post/ruan-jian-gou-zao-zhi-chou-xiang-ceng-ci-adt-oop/">
        </link>
        <updated>2022-05-29T15:14:54.000Z</updated>
        <content type="html"><![CDATA[<p>关于这种问题可以总结出一套方法来<br>
对于想要表示出A根据B产生影响 可以有这么几种方法<br>
A中定义一个B ，A的类中对B进行操作<br>
A中定义一个类，参数为B<br>
而如果A想要实现一个B基础上的功能 方法有<br>
A继承B 并且多实现一些类<br>
A中定义B，并且类可以调用B对象<br>
分别是继承和组合的思路<br>
这里面我上一道题采用组合，这一道题采用继承，原因分别是上一道题 我们想要自然表达出来的意思是自然构建出一个图，但是只是一个工具来实现poetwalk<br>
而这道题 我们的friendshipgraph就是我们这个类的主体功能，并且将会而且很有可能会被继续复用，因为它仍然保持一个图，比如我们下一个需求是实现继承这个图，继续操作的话，我们用继承就要比组合逻辑更加清晰了<br>
6.1实验过程中收获的经验和教训（必答）<br>
1.先测试再写 ！！！<br>
非常有用！！<br>
等价类测试的思想成功的平衡了程序员在编程完成之后的心态与事实程序的有效性与可靠性问题。也就是在我们编程之后，更倾向于较简单的方法的操作，这里先把测试在头脑最清醒的时候编写完，然后之后就可以一键测试了，这对程序员非常友好。<br>
事实上，这种思想解决了我考试的问题，因为我做完题后不喜欢检查，这样，我就可以提前准备好需要测试的样例，做完之后拿进去检查，实现了正确率的突破。<br>
2.边写程序，边写报告，非常重要！<br>
3.思考非常重要，并且不要局限于PPT或老师陈述的例子，多去网上找实现的好的代码，从中体会那些顶尖程序员的思想与设计方法<br>
4.和助教交流非常重要，非常感谢助教的帮助，让我注意到了很多细节，以及一些犯的错误<br>
6.2针对以下方面的感受（必答）<br>
(1)面向ADT的编程和直接面向应用场景编程，你体会到二者有何差异？</p>
<p>面向ADT的编程，其实主要就是重视可扩展性与可迁移性，而面向应用场景编程更多是考虑当前任务的属性和特性 进行一些特化的编程。事实上，ADT的编程与直接面向应用编程以我们接触到的并不是绝对的。<br>
用数学化表示 F（V，B，H）V表示抽象化的程度，B表示具象化程度，H表示抽象意义的事实深度，事实上我们是利用一定程度的抽象与一定程度的具象在一定维度与深度的空间内完成任务，可以用较低维度空间内的抽象来实现一个相对具象的应用程序，也可以用一个较高层次的抽象结合上较低层次的具象来完成任务。<br>
这是因为任务本身就不是处在具象的最底层，所以只需要提升一下具象任务的抽象层次，很容易实现一个当前应用程序的泛化。而同样降低层次也是很容易的，这是由ADT所影响的，只需要往下具体化一个层次，就具象化程度更高了。</p>
<p>可以想到的对于一个非常具体的任务，我们也没有必要使用ADT，而对于大规模程序，内部相联度非常高，肯定一个个编太麻烦了，但是也有可能必须要一个一个编写，因此还需要引入一个D，表示一种意义上的组联度，用来衡量使用ADT是否有价值。<br>
(2)使用泛型和不使用泛型的编程，对你来说有何差异？<br>
差异也是有的，但是使用泛型更适合编写更加大型的程序，在大规模程序且程序需要复用的情况比较多的时候，我们用泛型编程更有优势。在具体小任务种，不使用泛型同样也很有竞争力。<br>
(3)在给出ADT的规约后就开始编写测试用例，优势是什么？你是否能够适应这种测试方式？<br>
优势是可以非常清醒的思考整个行为是什么样子的，首先这种测试的编写，就需要对其行为有较高程度的抽象理解，虽然不必知道内部细节。其次这种测试有助于平衡程序员在完成任务时的心态与程序的客观准确率可靠性。因为我们编程之后并不喜欢去自己再去写测试样例，这很累对吧，所以我们提前去写测试样例，一方面利用了思考项目的时间，另一方面节约了编完程测试的时间。<br>
非常能！<br>
(4)P1设计的ADT在多个应用场景下使用，这种复用带来什么好处？<br>
节约了程序员的体力，以及代码容量，更重要的是让项目的组织架构更加清晰<br>
(5)为ADT撰写specification, invariants, RI, AF，时刻注意ADT是否有rep exposure，这些工作的意义是什么？你是否愿意在以后编程中坚持这么做？<br>
这些的意义是用来保证我们的项目能有效 稳定且可靠的在客户端手里运行<br>
是的</p>
<p>需要注意的是ADT是一种重要的思想</p>
]]></content>
    </entry>
</feed>